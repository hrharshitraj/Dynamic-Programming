class Solution {
// You can either take 1 step or you can take 2 steps until you reach at nth step;
// TC - O(2^n), SC - O(n);
// n >= 42 -> Time Limit Exceeded -> Stack overflow due to recursion calls;
    private int recursionway(int n, int idx) {
        if(idx>=n) {
            if(idx==n) return 1;
            return 0;
        }

        int count = 0;
        count = count + recursionway(n,idx+1);
        count = count + recursionway(n,idx+2);

        return count;
    }

// TC - O(n), SC - O(n)+O(n);
// n >= 42 -> Time Limit Exceeded -> Stack overflow due to recursion calls;
    private int memoizationway(int n) {
        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);

        if(n==0 || n==1) return 1;
        if(dp[n]!=-1) return dp[n];
        return dp[n] = memoizationway(n-1) + memoizationway(n-2);
    }

// TC - O(n), SC - O(n);
// All test cases passed as there's no recursion call required;
    private int tabulationway(int n) {
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;

        for(int i=2; i<=n; i++) {
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }

// TC - O(n), SC - O(1);
// All test cases passed as there's no recursion call required, no dp[] array required;
    private int bestOptimizedway(int n) {
        int prev = 1;
        int prev2 = 1;
        for(int i=2; i<=n; i++) {
            int curr = prev+prev2;
            prev2 = prev;
            prev = curr;
        }
        return prev;
    }

    public int climbStairs(int n) {
        // return recursionway(n,0);
        // return memoizationway(n);
        // return tabulationway(n);
        return bestOptimizedway(n);
    }
}

Related Topics-
Math
Dynamic Programming
Memoization
