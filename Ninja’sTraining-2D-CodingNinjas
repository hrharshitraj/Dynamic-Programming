import java.util.*;
public class Solution {
    // Recursion-
    private static int maxMeritPoints(int[][] points, int n, int idx, int last) {
        if(idx==0) {
            int merit = 0;
            for(int i=0; i<3; i++) {
                if(i!=last) {   // When you reach at the last day, you have option to choose the task that gives the maximum merit points except the task that was done last day;
                    merit = Math.max(merit,points[0][i]);
                }
            }
            return merit;
        }

        int maxMerit = 0;
        int curr = 0;
        for(int i=0; i<3; i++) {
            if(i!=last) {
                curr = points[idx][i] + maxMeritPoints(points, n, idx-1, i);
                maxMerit = Math.max(maxMerit,curr);
            }
        }
        return maxMerit;
    }

    // Memoization-
    private static int maxMeritPoints(int[][] points, int n, int idx, int last, int[][] dp) {
        if(idx==0) {
            int merit = 0;
            for(int i=0; i<3; i++) {
                if(i!=last) {   // When you reach at the last day, you have option to choose the task that gives the maximum merit points except the task that was done last day;
                    merit = Math.max(merit,points[idx][i]);
                }
            }
            return dp[idx][last] = merit;
        }

        if(dp[idx][last]!=-1) return dp[idx][last];   // If already computed, just return the value, no need to go inside the loop;
        
        int maxMerit = 0;
        for(int i=0; i<3; i++) {
            if(i!=last) {
                int curr = points[idx][i] + maxMeritPoints(points, n, idx-1, i, dp);
                maxMerit = Math.max(maxMerit,curr);
            }
        }
        return dp[idx][last] = maxMerit;
    }

    public static int ninjaTraining(int n, int points[][]) {
        // return maxMeritPoints(points,n,n-1,3);
        // idx = n-1(Top-down Approach), last = 3(No task performed);
        // 0 -> Running, 1 -> Fighting Practice, 2 -> Learning New Moves;

        // DP Solution-
        int[][] dp = new int[n+1][4];
        for(int[] row : dp) Arrays.fill(row,-1);
        return maxMeritPoints(points,n,n-1,3,dp);
    }
}
