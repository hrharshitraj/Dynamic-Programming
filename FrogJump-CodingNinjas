https://www.codingninjas.com/studio/problems/frog-jump_3621012

import java.util.* ;
import java.io.*; 

// Recursion(0 to n-1) to Memoization;
public class Solution {
    private static int minEnergyLost(int[] heights, int n, int idx, int currEnergyLost) {
        int min = Integer.MAX_VALUE;
        int left = Integer.MAX_VALUE;
        int right = Integer.MAX_VALUE;
        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);
        if(idx==n-1) {
            min = Math.min(min,currEnergyLost);
            return min;
        }

        int a = Integer.MAX_VALUE;
        if(idx<n-1) {
            if(dp[idx]!=-1) return dp[idx];
            else {
                currEnergyLost += Math.abs(heights[idx]-heights[idx+1]);  // If you store absolute value, then you need to subtract the value once you come back(Backtrack);
                left = minEnergyLost(heights, n, idx+1, currEnergyLost);
                currEnergyLost -= Math.abs(heights[idx]-heights[idx+1]);
            }
            
        }

        if(idx<n-2) {
            if(dp[idx]!=-1) right = dp[idx];
            else {
                currEnergyLost += Math.abs(heights[idx]-heights[idx+2]);
                right = minEnergyLost(heights, n, idx+2, currEnergyLost);
                currEnergyLost -= Math.abs(heights[idx]-heights[idx+2]);
            }
        }
        dp[idx] = Math.min(left,right);
        return dp[idx];
    }

    public static int frogJump(int n, int heights[]) {
        return minEnergyLost(heights,n,0,0);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Memoization(n-1 to 0);
public class Solution {
    private static int minEnergyLost(int[] heights,int idx,int[] dp){
        int jumpOne = Integer.MAX_VALUE;   // When frog jumps 1 stair;
        int jumpTwo = Integer.MAX_VALUE;   // When frog jumps 2 stairs;

        if(idx==0) return 0;   // From 0th to 0th, jump doesn't loose any energy;

        if(dp[idx]!=-1) return dp[idx];   // It means dp[idx] is already being computed, and its value is stored in dp[], return it; 
        jumpOne = minEnergyLost(heights,idx-1,dp) + Math.abs(heights[idx]-heights[idx-1]);   // Absolute difference of idx and idx-1 will give us the energy lost by frog;
        if(idx>1) jumpTwo = minEnergyLost(heights,idx-2,dp) + Math.abs(heights[idx]-heights[idx-2]);   // Since absolute values of energy lost has not been stored in any variable, we needn't to backtrack once we come back;
        
        // Not computed already, find minimum energy lost from a particular jump, store it in dp[idx];
        return dp[idx] = Math.min(jumpOne, jumpTwo);  // Minimum energy lost at every jump will be considered;
}

    public static int frogJump(int n, int heights[]) {
        int dp[]=new int[n];  // It's better if you initialize dp[] here only;
        Arrays.fill(dp,-1);
        return minEnergyLost(heights,n-1,dp);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Tabulation(0 to n-1);
public class Solution {
    private static int minEnergyLost(int[] heights, int[] dp) {
        int n = heights.length;
        // int firstJump = Integer.MAX_VALUE;  // Your wish where you want to initialize itl
        int secondJump = Integer.MAX_VALUE;   // You must initialize secondJump here as there's a if condition affecting its work in loop;
        
        dp[0] = 0;    // Base case in Memoization;
        for(int i=1; i<n; i++) {   // Condition when recurrence relation in Memoization could be executed;
            int firstJump = dp[i-1] + Math.abs(heights[i]-heights[i-1]);   // Recursion call is replaced by storing the value in dp[];
            if(i>1) secondJump = dp[i-2] + Math.abs(heights[i]-heights[i-2]);

            dp[i] = Math.min(firstJump,secondJump);   // Store the ith minimum jump value in dp[];
        }
        return dp[n-1];  // Minimum energy taken by the frog to reach till last stairs is stored at dp[n-1];
    }

    public static int frogJump(int n, int heights[]) {
        int dp[]=new int[n+1];  // It's better if you initialize dp[] here only;
        Arrays.fill(dp,-1);
        return minEnergyLost(heights,dp);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Space optimization(O(1);
// Instead of storing the values at each stair in a dp[], just keep calculating the minimum energy lost at last and second last stair, so that we could calculate energy
losts when the frog taken a single step jump as well as if he had taken 2 stairs jump, Two variables would do our work, Space is optimised(O(1));
public class Solution {
    private static int minEnergyLost(int[] heights, int n) {
        int firstJump = Integer.MAX_VALUE;  // Your wish where you want to initialize itl
        int secondJump = Integer.MAX_VALUE;   // You must initialize secondJump here as there's a if condition affecting its work in loop;
        
        int minOne = 0;  // To store the minimum energy lost till last stair;
        int minTwo = 0;  // Two store the minimum energy lost till second last stair;
        for(int i=1; i<n; i++) {   
            firstJump = minOne + Math.abs(heights[i]-heights[i-1]);
            if(i>1) secondJump = minTwo + Math.abs(heights[i]-heights[i-2]);

            minTwo = minOne;   // Store last step energy lost in second last step energy lost as now you get the current stair energy lost;
            minOne = Math.min(firstJump,secondJump); // Minimum energy lost till current stair;
        }
        return minOne;  // Minimum energy taken by the frog to reach till last stairs is stored at dp[n-1];
    }

    public static int frogJump(int n, int heights[]) {
        return minEnergyLost(heights,n);
    }
}
